import java.util.Scanner;
import java.util.Arrays;

public class Game{
<<<<<<< HEAD
    Board board;
    Player player;
    Ai[] aiArray;
    public String testString = "GAME REFERENCE VALID";

    public Game(){
	this.testString =  "GAME REFERENCE VALID";
	this.board = new Board();
	this.player = board.getPlayer();
	this.aiArray = board.getAiArray();
    }

    public String toString(){
	return board.toString();
    }
    
    

    public void moveEntity(int dx, int dy, Entity e){
      //System.out.println("called moveEntity");

      int px = e.getX();
      int py = e.getY();

      int x = px + dx;
      int y = py + dy;
      //System.out.println(x);      
      //System.out.println(y);      


      if (board.checkTile(x,y)){
	  //System.out.println("checkTile valid");
	  Tile targetTile = board.getTile(x, y);

	  // vacate Entity's current tile
	  board.getTile(px, py).vacate();

	  // move the entity
	  e.move(dx, dy);
        
	  // occupy the new tile
	  targetTile.occupy(e);
	        
	  }
=======
  Board board = new Board();
  Player player;

  public Game(){
    player = board.getPlayer();
    System.out.println(player);
    //example map change thing here v
    //board.getTile(5,5).mutate(block);

  }

  public String toString(){
    return board.toString();
  }

  public boolean checkTile(int x, int y){
    return (board.getTile(x,y).isOccupied()); //checks Tile occupancy

  }


  public boolean checkEdge(int x, int y){
    return (x<board.getWidth() && x>-1 && y<board.getHeight() && y>-1);

  }



  public void movePlayer(int dx, int dy){
    System.out.println(player);
    int px = player.getX();
    int py = player.getY();
    int x = px + dx;
    int y = py + dy;

    // if location is valid
    if ( checkTile(x, y) ){
      
      Tile tile = board.getTile(x, y);
      if( !tile.isOccupied() ){
        
        // vacate players current tile
        board.getTile(px, py).vacate();

        // move the player
        player.move(dx, dy);
        
        // occupy the new tile
        tile.occupy(player);
      }      
    }
  }


  public void handleMove(String s){
    if (s.equals("w")){
      movePlayer(0, -1);
    }
    else if (s.equals("a")){
      movePlayer(-1, 0);
    }
    else if (s.equals("s")){
      movePlayer(0, 1);
    }
    else if (s.equals("d")){
      movePlayer(1, 0);
    }
    else{
      ; // do nothing
>>>>>>> a75e6c7ad7dc7cdea9dc4b0688281d00bac7ac75
    }
  }


<<<<<<< HEAD
    public void handleMove(String s, Entity e){
	//System.out.println("called handleMove");
	if (s.equals("w")){
	    e.face(s);
	    moveEntity(0, -1, e);
	}
	else if (s.equals("a")){
	    e.face(s);
	    moveEntity(-1, 0, e);
	}
	else if (s.equals("s")){
	    e.face(s);
	    moveEntity(0, 1, e);
	}
	else if (s.equals("d")){
	    e.face(s);
	    moveEntity(1, 0, e);
	}
	else{
	    ; // do nothing
	}
    }
    public void mainloop(Game g, Scanner s){
	board.takeGame(this);
	board.gameAi();
	while (true){
	    System.out.println(g);
	    g.handleMove(s.next(), player);
	    for (int i=0 ; i<aiArray.length; i++){
		aiArray[i].tick();
	    }
	}
    }
    

  /***********************************/
  public static void main(String[] args){
      Game g = new Game();
      Scanner s = new Scanner(System.in);
      g.mainloop(g, s);
=======

  /***********************************/
  public static void main(String[] args){
    Game g = new Game();
    Scanner s = new Scanner(System.in);

    while (true){
      System.out.println(g);
      g.handleMove(s.next());
    }
>>>>>>> a75e6c7ad7dc7cdea9dc4b0688281d00bac7ac75
  }
  /************************************/

}